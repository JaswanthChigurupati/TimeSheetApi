name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -c Release -o ${{ github.workspace }}/publish

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-api
        path: ${{ github.workspace }}/publish

  plan:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: dotnet-api
        path: ${{ github.workspace }}/publish

    - name: Set up Kubernetes
      uses: Azure/setup-kubectl@v1
      with:
        version: 'v1.21.0'

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: az aks get-credentials --resource-group aks-resource-group --name aks-cluster

    - name: Plan Deployment
      run: kubectl apply --dry-run=client -f k8s/deployment.yaml

  deploy:
    needs: plan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: dotnet-api
        path: ${{ github.workspace }}/publish

    - name: Set up Kubernetes
      uses: Azure/setup-kubectl@v1
      with:
        version: 'v1.21.0'

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: az aks get-credentials --resource-group aks-resource-group --name aks-cluster

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
